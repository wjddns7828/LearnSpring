제어 역전 (Inversion of Control) : 프로그램의 흐름을 직접 제어하는것이 아닌 외부에서 관리하는 것을 제어역전(IoC)라고 한다
	Ex)	AppConfig의 등장으로 구현 객체(OrderServiceImpl 등등)은 필요한 인터페이스를 호출하지만
		어떤 구현객체(memoryMemberRepository,FixedDiscountPolicy 등등)가 실행될 지 모른다.
		왜냐하면 제어흐름에 대한 권한은 모두 AppConfig가 가지고 있기 떄문이다.

의존관계 주입 (Dependency Injection):
	- OrderServiceImpl은 DiscountPlicy 인터페이스에 의존하고 있지만 어떤 객체가 실행될지는 모른다.
	- 의존관계는 정적인 클래스 의존관계와 실행시점에 결졍되는 동적인 객체(인스턴스) 의존관계를 분리하여 생각하여야 한다.
	
	정적인 클래스 의존관계 : 해당 클래스가 사용하는 import 코드만 보고도 쉽게 판단할 수 있다. 즉, 해당 클래스를 실행하지 않아도 의존관계를 알 수 있
	Ex) 클래스 다이어그램, import 등등

	동적인 객체 의존관계 : 애플리케이션 실행 시점에 생성된 객체 인스턴스의 참조가 연결된 의존관계를 말한다.
	- 애플리케이션의 실행(Runtime) 시점에 외부(Ex.AppConfig)에서 실제 구현객체(MemberServiceImpl,MemoryMemberRepository 등등)을 생성(New)하고
		클라이언트와 서버의 실제 의존관계가 연결되는 것을 의존관계 주입 이라고 한다.
	- 객체 인스턴스를 생성하고 참조(Reference)값을 전달해서 연결된다.
	- 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트의 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
	- 의존관계 주입을 사용하면 정적인 클래스를 변경하지않고 동적인 객체 인스턴스를 쉽게 변경할 수 있다. 즉, 실제 실행되는 어플리케이션의 코드를 수정하지 않아도 된다는 뜻
	
IoC컨테이너와 DI 컨테이너
	- AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을 IoC컨테이너 또는 DI컨테이너라고 함
	AppConfig == IoC컨테이너 또는 DI 컨테이너 역할을 함
	또는 어샘블러, 오브젝트 팩토리 라고 함